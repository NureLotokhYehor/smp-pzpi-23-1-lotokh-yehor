 
 
Міністерство освіти і науки України 
 
 
 
Харківський національний університет радіоелектроніки 
 
 
 
 
 
 
 
Кафедра програмної інженерії 
 
 
 



 
Звіт з практичної роботи №1
з дисципліни «Скриптові мови програмування» 
 
 
 
 
 






 
Виконав:                                                                              Перевірили: 
гр.ПЗПІ-23-1                                                                       Сокорчук Ігор 
Лотох Єгор                                                              		Петрович 
 
 
 


Харків 2025 
ЗАВДАННЯ 

Написатати Bash скрипт, який друкуватиме на екрані ялинку із
двох ярусів гілок, стовбура та шару снігу.

 
ОПИС ВИКОНАННОЇ РОБОТИ
 
1. Програма починає свою роботу з функції main. Якщо в функцію не були передані параметри, до програма виводить допоміжну стрічку з параметрами які потрібно ввести [додаток А, рядки 104-107]
2. Була створена функція is_width_posible, яка перевіряє чи можливо створити ялинку з заданою користувачем шириною основи стовбура. Функція повертає true якщо ширина є непарним числом. [додаток А, рядки 86-93]
3. Була створена функція need_height, яка повертає потрібну висоту ялиннки для вказаної користувачем ширини. [додаток А, рядки 78-84]
4. Якщо передані користувачем параметри не можливі для того щоб намалювати ялинку, вони округляються в менший бік, якщо так вони також недійсні, то програма завершує свою роботу та повертає помилку. [додаток А, рядки 104-128]
5. Якщо параметри дійсні, спочатку викликається функція create_top_row. Вона приймає максимальну кількість кліток в останньому ряду верхньої частини ялинки. За допомогою циклу do while програма заповнює клітинки у кожному рядку. В кінці циклу до змінної яка відповідає за кількість заповнених клітинок в рядку який перебирає на разі цикл, додається 2. Цикл працює до тих пір, поки в останньому рядку кількість заповнених клітинок не стане дорівнювати переданому аргументу в функцію, а саме максимальній кількості кліток в останньому ряду верхньої частини ялинки [додаток А, рядки 3-23]
6. Потім викликається функція create_middle_row. Вона приймає кількість рядків в середньому слої ялинки та максимальну кількість заповнених клітинок в останньому рядку середнього слою. Для того щоб розрахувати кількість потрібних рядків для середнього слою викликається функція min_height, яка повертає кількість рядків ялинки без верхнього слою. Потім від загальної кількості рядків віднімається min_height. На основі ціх даних визначається кількість заповнених клітин в останньому рядку, але тепер рахівник починається з 3-х. [додаток А, рядки 25-55]
7. Останньою викликається функція create_low_row, яка виводить стовбур та основу ялинки [додаток А, рядки 57-71]

ВИСНОВОК 
 
У результаті лабороторної роботи було розроблено систему авторизації на сайті, профіль сайту та можливість його зміни, використовуючи мову php та вбудований сервер php. Програма демонструє навички роботи з формами, HTTP запитами та роботою з базами даних SQLITE.
 
ДОДАТОК А
Код програми:
1. #!/bin/bash
2. 
3. create_top_level() {
4.     local max_cells=$1
5.     local filled_cells=1
6.     local iters=0
7. 
8.     while [ $filled_cells -le $((max_cells)) ]; do
9.         local all_gaps=$((max_cells - filled_cells))
10.         local half_gaps=$(((all_gaps / 2) + 1))
11.         iters=$((iters + 1))
12. 
13.         printf "%*s" $half_gaps ""
14.         if [ $((iters % 2)) -eq 0 ]; then
15.             for ((i = 0; i < filled_cells; i++)); do printf '#'; done
16.         else
17.             for ((i = 0; i < filled_cells; i++)); do printf '*'; done
18.         fi
19.         echo
20. 
21.         filled_cells=$((filled_cells + 2))
22.     done
23. }
24. 
25. create_middle_level() {
26.     local rows=$1
27.     local snow_width=$2
28.     local max_cells=$((1 + (rows - 1) * 2 + 2))
29.     local filled_cells=3
30.     local iters=0
31. 
32.     until [ $filled_cells -gt $((max_cells)) ]; do
33.         local all_gaps=$((snow_width - filled_cells))
34.         local half_gaps=$(((all_gaps / 2) + 1))
35.         iters=$((iters + 1))
36. 
37.         printf "%*s" $half_gaps ""
38.         if [ $(((max_cells + 1) / 2 % 2)) -eq 0 ]; then
39.             if [ $((iters % 2)) -eq 0 ]; then
40.                 for ((i = 0; i < filled_cells; i++)); do printf '#'; done
41.             else
42.                 for ((i = 0; i < filled_cells; i++)); do printf '*'; done
43.             fi
44.         else
45.             if [ $((iters % 2)) -eq 0 ]; then
46.                 for ((i = 0; i < filled_cells; i++)); do printf '*'; done
47.             else
48.                 for ((i = 0; i < filled_cells; i++)); do printf '#'; done
49.             fi
50.         fi
51.         echo
52. 
53.         filled_cells=$((filled_cells + 2))
54.     done
55. }
56. 
57. create_low_level() {
58.     local max_cells=$1
59.     local pillar_width=3
60.     local all_gaps=$((max_cells - pillar_width))
61.     local half_gaps=$((all_gaps / 2))
62. 
63.     for _ in 1 2; do
64.         printf "%*s" $half_gaps ""
65.         for ((i = 0; i < pillar_width; i++)); do printf '#'; done
66.         echo
67.     done
68. 
69.     for ((i = 0; i < max_cells; i++)); do printf '*'; done
70.     echo
71. }
72. 
73. min_height() {
74.     local max_cells=$1
75.     echo $(((max_cells - 1) / 2 + 3))
76. }
77. 
78. need_height() {
79.     local max_cells=$1
80.     local first_level=$(((max_cells - 1) / 2))
81.     local second_level=$(((max_cells - 1) / 2 - 1))
82.     local third_level=3
83.     echo $((first_level + second_level + third_level))
84. }
85. 
86. is_width_possible() {
87.     local max_cells=$1
88.     if [ $(((max_cells + 1) % 2)) -eq 0 ]; then
89.         return 0
90.     else
91.         return 1
92.     fi
93. }
94. 
95. main() {
96.     if [ $# -ne 2 ]; then
97.         echo "Usage: $0 <rows> <snowWidth>" >&2
98.         exit 1
99.     fi
100. 
101.     local rows=$1
102.     local snow_width=$2
103. 
104.     if [ $snow_width -le 0 ] || [ $rows -le 0 ]; then
105.         echo "It is impossible to create a Christmas tree with such a height and such a width" >&2
106.         exit 1
107.     fi
108. 
109.     if ! is_width_possible $snow_width; then
110.         if is_width_possible $((snow_width - 1)); then
111.             snow_width=$((snow_width - 1))
112.         else
113.             echo "It is impossible to create a Christmas tree with such a height and such a width" >&2
114.             echo "Width error" >&2
115.             exit 1
116.         fi
117.     fi
118. 
119.     local needed_height=$(need_height $snow_width)
120.     if [ $rows -ne $needed_height ]; then
121.         if [ $((rows - 1)) -eq $needed_height ]; then
122.             rows=$((rows - 1))
123.         else
124.             echo "It is impossible to create a Christmas tree with such a height and such a width" >&2
125.             echo "Height error" >&2
126.             exit 1
127.         fi
128.     fi
129. 
130.     create_top_level $((snow_width - 2))
131.     create_middle_level $((rows - $(min_height $snow_width))) $((snow_width - 2))
132.     create_low_level $snow_width
133. }
134. 
135. main "$@"